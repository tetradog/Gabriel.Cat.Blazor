@using Gabriel.Cat.Blazor.Client.Controles.Inputs

    <Microsoft.AspNetCore.Components.Forms.EditForm Model="Data"  style="display:inline" >
        @if (IsNullable)
        {
            <Microsoft.AspNetCore.Components.Forms.InputDate @bind-Value="DataNullable.Data"  style="display:inline"  />
        }
        else
        {
            <Microsoft.AspNetCore.Components.Forms.InputDate @bind-Value="Data.Data" style="display:inline"  />
        }

    </Microsoft.AspNetCore.Components.Forms.EditForm>

@code {
    [Parameter] public bool IsNullable { get; set; }
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public DateTime? InitValue { get; set; }
    InputData<DateTime?> DataNullable { get; set; }
    InputData<DateTime> Data { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Data = new InputData<DateTime>();
        DataNullable = new InputData<DateTime?>();

        if (IsNullable)
        {
            DataNullable.Data = InitValue;
        }
        else if (InitValue.HasValue)
        {
            Data.Data = InitValue.Value;
        }

        DataNullable.PropertyChanged += async (s, e) => await OnChange.InvokeAsync(Data.Data);
        Data.PropertyChanged += async (s, e) => await OnChange.InvokeAsync(Data.Data);

        await base.OnInitializedAsync();
    }

}