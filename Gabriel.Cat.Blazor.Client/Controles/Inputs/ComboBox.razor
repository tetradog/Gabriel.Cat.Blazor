@typeparam T
<select @bind="@data.Data">
    @if (!Equals(Source, default))
    {
        <option value="0"></option>
        @if (!Equals(ChildContent, default))
        {
            @for (int i = 0; i < Source.Count; i++)
            {
                <option value="@(i+1)">
                    ChildContent(Source[i]);
                </option>
            }
        }
        else
        {
            @for (int i = 0; i < Source.Count; i++)
            {
                <option value="@(i+1)">
                    @Source[i].ToString();
                </option>
            }
        }
    }
</select>

@code {
    [Parameter] public IList<T> Source { get; set; }
    [Parameter] public RenderFragment<T> ChildContent { get; set; }
    [Parameter] public EventCallback<T> OnSelectionChanged { get; set; }
    InputData<int> data;

    protected override async Task OnInitializedAsync()
    {
        data = new InputData<int>();
        data.Data = 0;
        data.PropertyChanged += async (s, e) => await OnSelectionChanged.InvokeAsync(data.Data == 0 ? default(T) : Source[data.Data - 1]);
        await base.OnInitializedAsync();
    }

}
