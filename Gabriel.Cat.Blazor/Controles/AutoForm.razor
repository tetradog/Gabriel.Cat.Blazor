@using Gabriel.Cat.S.Utilitats
@using Gabriel.Cat.S.Extension
@typeparam T
    <EditForm Model="@Model" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
        <DataAnnotationsValidator />
        @if (Model != null && propiedades != null)
        {
            for (int i = 0; i < propiedades.Count; i++)
            {
                @if (FormComponent<object>.IsCompatible(Gabriel.Cat.S.Extension.ExtensionObject.GetPropertyType(Model,propiedades[i].Name)))
                { 
                    <FormComponent Model="@propiedades[i]" For="@(() => propiedades[i].Property)" CustomName="@propiedades[i].Name" CustomType="@Gabriel.Cat.S.Extension.ExtensionObject.GetPropertyType(Model,propiedades[i].Name)" />
                }
            }
        }
        @if(ChildContent!=null)
            @ChildContent(Model)
    <button type="submit" class="btn btn-success">@Guardar</button>
    </EditForm>

@code {
    class PropertyHelper
    {
        public PropertyHelper(Object obj,Propiedad propiedad)
        {
            Object = obj;
            Name = propiedad.Info.Nombre;
        }
        public object Object { get; private set; }
        public string Name { get; private set; }
        public object Property
        {
            get { return Object.GetProperty(Name); }
            set
            {
                Object.SetProperty(Name, value);
            }
        }
    }

    [Parameter] public T Model { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnInvalidSubmit { get; set; }
    [Parameter] public RenderFragment<T> ChildContent { get; set; }
    [Parameter] public string Guardar { get; set; } = "Guardar";
    List<PropertyHelper> propiedades;

    protected override void OnInitialized()
    {
        propiedades = Model.GetPropiedades().Select((p)=>new PropertyHelper(Model,p)).ToList();
    }

}
